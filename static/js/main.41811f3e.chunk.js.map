{"version":3,"sources":["abilities.js","AbilitiesPanel.js","App.js","serviceWorker.js","index.js"],"names":["SCORE_COSTS","8","9","10","11","12","13","14","15","INITIAL_ABILITY_SCORES","getAbilityModifierString","score","modifier","Math","floor","getAbilityModifier","abs","AbilityChangeControl","props","label","increase","className","onClick","disabled","AbilityDisplay","cost","costLabel","name","decreaseClick","decreaseCost","canDecrease","increaseClick","increaseCost","canIncrease","AbilitiesPanel","abilities","ability","undefined","push","key","increaseAbility","decreaseAbility","points","Object","entries","abilityScores","RemainingPointsDisplay","remaining","max","App","state","assign","bind","value","oldValue","this","newValue","changeCost","updatedPoints","updatedAbility","setState","addToAbility","React","Component","Boolean","window","location","hostname","match","document","getElementById","addEventListener","event","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.41811f3e.chunk.js","sourcesContent":["// ability score -> cumulative point buy cost\nexport const SCORE_COSTS = {\n  8: 0,\n  9: 1,\n  10: 2,\n  11: 3,\n  12: 4,\n  13: 5,\n  14: 7,\n  15: 9,\n};\n\nconst STR = 'strength';\nconst DEX = 'dexterity';\nconst CON = 'constitution';\nconst INT = 'intelligence';\nconst WIS = 'wisdom';\nconst CHA = 'charisma';\n\n// order matches character sheet\nconst ORDERED_ABILITIES = [\n  STR,\n  DEX,\n  CON,\n  INT,\n  WIS,\n  CHA,\n];\n\nexport const INITIAL_ABILITY_SCORES = {};\nfor (const ability of ORDERED_ABILITIES) {\n  INITIAL_ABILITY_SCORES[ability] = 8\n}\n\n// defualt number of points to start with\nexport const DEFAULT_INITIAL_POINTS = 27;\n\nfunction getAbilityModifier(score) {\n  return Math.floor(score / 2) - 5;\n}\n\nexport function getAbilityModifierString(score) {\n  const modifier = getAbilityModifier(score);\n  const plusOrMinus = modifier >= 0 ? '+' : '-';\n  return `${plusOrMinus}${Math.abs(modifier)}`;\n}\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  SCORE_COSTS,\n  getAbilityModifierString\n} from './abilities.js';\nimport './AbilitiesPanel.css';\n\n\nfunction AbilityChangeControl(props) {\n  const label = props.increase ? '+' : '-';\n\n  return (\n    <button\n      className=\"ability-change-control\"\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      {label}\n    </button>\n  );\n}\n\nAbilityChangeControl.propTypes = {\n  increase: PropTypes.bool,\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool,\n};\n\nfunction AbilityDisplay(props) {\n  const modifier = getAbilityModifierString(props.score);\n\n  // we show a minus for positive costs because we're conveying the effect\n  // on the remaining point value\n  const cost = SCORE_COSTS[props.score];\n  const costPlusOrMinus = cost >= 0 ? '-' : '+';\n  const costLabel = `${costPlusOrMinus}${cost}`;\n\n  return (\n    <div className=\"ability\">\n      <div className=\"ability-name\"><strong>{props.name}</strong></div>\n      <table>\n        <tr>\n          <th>Score:</th>\n          <td>{props.score}</td>\n        </tr>\n        <tr>\n          <th>Modifier:</th>\n          <td>{modifier}</td>\n        </tr>\n        <tr>\n          <th>Points:</th>\n          <td>{costLabel}</td>\n        </tr>\n      </table>\n      <AbilityChangeControl\n        increase={false}\n        onClick={props.decreaseClick}\n        cost={props.decreaseCost}\n        disabled={!props.canDecrease}\n      />\n      <AbilityChangeControl\n        increase={true}\n        onClick={props.increaseClick}\n        cost={props.increaseCost}\n        disabled={!props.canIncrease}\n      />\n    </div>\n  );\n}\n\nAbilityDisplay.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.number,\n  increaseClick: PropTypes.func,\n  increaseCost: PropTypes.number,\n  canIncrease: PropTypes.bool,\n  decreaseClick: PropTypes.func,\n  decreaseCost: PropTypes.number,\n  canDecrease: PropTypes.bool,\n};\n\nfunction AbilitiesPanel(props) {\n  const abilities = [];\n  for (let [ability, score] of Object.entries(props.abilityScores)) {\n    const increaseClick = () => props.increaseAbility(ability);\n    const decreaseClick = () => props.decreaseAbility(ability);\n\n    const increaseCost = SCORE_COSTS[score + 1] === undefined ?\n      null :\n      SCORE_COSTS[score + 1] - SCORE_COSTS[score];\n    const decreaseCost = SCORE_COSTS[score - 1] === undefined ?\n      null :\n      SCORE_COSTS[score - 1] - SCORE_COSTS[score];\n    abilities.push(<AbilityDisplay\n      key={ability}\n      name={ability}\n      score={score}\n      increaseClick={increaseClick}\n      decreaseClick={decreaseClick}\n      increaseCost={increaseCost}\n      decreaseCost={decreaseCost}\n      canIncrease={increaseCost !== null && increaseCost <= props.points}\n      canDecrease={decreaseCost !== null}\n    />);\n  }\n\n  return (\n    <div className=\"abilities-container\">\n      {abilities}\n    </div>\n  );\n}\n\nAbilitiesPanel.propTypes = {\n  abilityScores: PropTypes.objectOf(PropTypes.number),\n  points: PropTypes.number,\n  increaseAbility: PropTypes.func,\n  decreaseAbility: PropTypes.func,\n};\n\nexport default AbilitiesPanel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  SCORE_COSTS,\n  DEFAULT_INITIAL_POINTS,\n  INITIAL_ABILITY_SCORES,\n} from './abilities.js';\nimport AbilitiesPanel from './AbilitiesPanel.js';\nimport './App.css';\n\n\nfunction RemainingPointsDisplay(props) {\n  return (\n    <div className=\"points-container\">\n      <div><strong>Remaining points:</strong></div>\n      <div className=\"points\">{props.remaining} / {props.max}</div>\n    </div>\n  );\n}\n\nRemainingPointsDisplay.propTypes = {\n  remaining: PropTypes.number,\n  max: PropTypes.number,\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      points: DEFAULT_INITIAL_POINTS,\n      abilities: Object.assign({}, INITIAL_ABILITY_SCORES),\n    };\n\n    this.increaseAbility = this.increaseAbility.bind(this);\n    this.decreaseAbility = this.decreaseAbility.bind(this);\n  }\n\n  addToAbility(ability, value) {\n    const oldValue = this.state.abilities[ability];\n    const newValue = oldValue + value;\n\n    if (SCORE_COSTS[newValue] === undefined) {\n      // the new value is not allowed\n      return;\n    }\n\n    const changeCost = SCORE_COSTS[newValue] - SCORE_COSTS[oldValue];\n    if (changeCost > this.state.points) {\n      // there are not enough points remaining for this change\n      return;\n    }\n\n    const updatedPoints = this.state.points - changeCost;\n    const updatedAbility = {\n      [ability]: this.state.abilities[ability] + value,\n    };\n    this.setState({\n      points: updatedPoints,\n      abilities: Object.assign({}, this.state.abilities, updatedAbility),\n    });\n  }\n\n  increaseAbility(ability) {\n    this.addToAbility(ability, 1);\n  }\n\n  decreaseAbility(ability) {\n    this.addToAbility(ability, -1);\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <h1>D&amp;D 5e Point Buy Calculator</h1>\n        <RemainingPointsDisplay\n          remaining={this.state.points}\n          max={DEFAULT_INITIAL_POINTS}\n        />\n        <AbilitiesPanel\n          abilityScores={this.state.abilities}\n          increaseAbility={this.increaseAbility}\n          decreaseAbility={this.decreaseAbility}\n          points={this.state.points}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// disable double tap zoom\ndocument.getElementById('root').addEventListener('click', event => {});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}