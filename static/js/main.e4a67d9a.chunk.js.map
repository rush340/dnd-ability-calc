{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["COST_TABLE","8","9","10","11","12","13","14","15","INITIAL_ABILITY_SCORES","AbilityChangeControl","props","label","increase","disabled","cost","plusOrMinus","costLabel","Math","abs","onClick","Ability","score","modifier","floor","name","increaseClick","increaseCost","decreaseClick","decreaseCost","App","state","points","abilities","Object","assign","increaseAbility","bind","decreaseAbility","ability","value","old_value","this","new_value","undefined","change_cost","updated_points","updated_ability","setState","addToAbility","push","key","entries","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e4a67d9a.chunk.js","sourcesContent":["// TODO camelCase var names\n// TODO refactor\n\nimport React from 'react';\nimport './App.css';\n\n\nconst COST_TABLE = {\n  8: 0,\n  9: 1,\n  10: 2,\n  11: 3,\n  12: 4,\n  13: 5,\n  14: 7,\n  15: 9,\n};\n\nconst STR = 'strength';\nconst CON = 'constitution';\nconst DEX = 'dexterity';\nconst INT = 'intelligence';\nconst WIS = 'wisdom';\nconst CHA = 'charisma';\nconst ABILITIES = [\n  STR,\n  CON,\n  DEX,\n  INT,\n  WIS,\n  CHA,\n];\n\nconst INITIAL_ABILITY_SCORES = {};\nfor (const ability of ABILITIES) {\n  INITIAL_ABILITY_SCORES[ability] = 8\n}\n\n// defualt number of points to start with\nconst DEFAULT_INITIAL_POINTS = 27;\n\n\nfunction getAbilityModifier(score) {\n  return Math.floor(score / 2) - 5;\n}\n\n\nfunction AbilityChangeControl(props) {\n  const label = props.increase ? 'Increase' : 'Decrease';\n  const disabled = props.cost === null;\n  // we show a minus for positive costs because we're conveying the effect\n  // on the remaining point value\n  const plusOrMinus = props.cost >= 0 ? '-' : '+';\n  const costLabel = disabled ?\n    '' :\n    `(${plusOrMinus}${Math.abs(props.cost)} point${Math.abs(props.cost) > 1 ? 's' : ''})`;\n  return (\n    <div>\n      <button\n        onClick={props.onClick}\n        disabled={disabled}\n      >\n        {label} {costLabel}\n      </button>\n    </div>\n  );\n}\n\nfunction Ability(props) {\n  const modifier = getAbilityModifier(props.score);\n  return (\n    <div>\n      <div><strong>{props.name}</strong></div>\n      <div>Score: {props.score}</div>\n      <div>Modifier: {modifier}</div>\n      <AbilityChangeControl\n        increase={true}\n        onClick={props.increaseClick}\n        cost={props.increaseCost}\n      />\n      <AbilityChangeControl\n        increase={false}\n        onClick={props.decreaseClick}\n        cost={props.decreaseCost}\n      />\n    </div>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      points: DEFAULT_INITIAL_POINTS,\n      abilities: Object.assign({}, INITIAL_ABILITY_SCORES),\n    };\n\n    this.increaseAbility = this.increaseAbility.bind(this);\n    this.decreaseAbility = this.decreaseAbility.bind(this);\n  }\n\n  addToAbility(ability, value) {\n    const old_value = this.state.abilities[ability];\n    const new_value = old_value + value;\n\n    if (COST_TABLE[new_value] === undefined) {\n      // the new value is not allowed\n      return;\n    }\n\n    const change_cost = COST_TABLE[new_value] - COST_TABLE[old_value];\n    if (change_cost > this.state.points) {\n      // there are not enough points remaining for this change\n      return;\n    }\n\n    const updated_points = this.state.points - change_cost;\n    const updated_ability = {\n      [ability]: this.state.abilities[ability] + value,\n    };\n    this.setState({\n      points: updated_points,\n      abilities: Object.assign({}, this.state.abilities, updated_ability),\n    });\n  }\n\n  increaseAbility(ability) {\n    this.addToAbility(ability, 1);\n  }\n\n  decreaseAbility(ability) {\n    this.addToAbility(ability, -1);\n  }\n\n  render() {\n    const abilities = [];\n    for (let [ability, score] of Object.entries(this.state.abilities)) {\n      const increaseClick = () => this.increaseAbility(ability);\n      const decreaseClick = () => this.decreaseAbility(ability);\n\n      const increaseCost = COST_TABLE[score + 1] === undefined ?\n        null :\n        COST_TABLE[score + 1] - COST_TABLE[score];\n      const decreaseCost = COST_TABLE[score - 1] === undefined ?\n        null :\n        COST_TABLE[score - 1] - COST_TABLE[score];\n      abilities.push(<Ability\n        key={ability}\n        name={ability}\n        score={score}\n        increaseClick={increaseClick}\n        decreaseClick={decreaseClick}\n        increaseCost={increaseCost}\n        decreaseCost={decreaseCost}\n      />);\n      // TODO remove this once there's css\n      abilities.push(<br />);\n    }\n\n    return (\n      <div>\n        <h1>D&amp;D 5e Point Buy Calculator</h1>\n        <div><strong>Remaining points:</strong> {this.state.points}</div>\n        <br />\n        {abilities}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}